import csv
from pathlib import Path
import pandas as pd


curr = Path(__file__)
db_dir = curr.parents[1]

users_csv = "data/Users.csv"
specific_order_csv = "data/Specific_Order.csv"
order_content_csv = "data/Order_Content.csv"
account_history_csv = "data/Account_History.csv"
inventory_csv = "data/Inventory.csv"

# goes through data generated by gen.py
# goes through each specific order and calculates its total price and fulfillment status based off the price and fulfillment of its order contents
def process_orders(test):
    df_specific_order = pd.read_csv(db_dir / specific_order_csv, header=None)
    if len(df_specific_order.columns) > 3:
        print("Order status and cost already added")
        return

    print("Original Specific_Order")
    print(df_specific_order.head(), '\n')

    df_specific_order.columns = ["id", "uid", "time_stamp"]
    df_specific_order = df_specific_order.set_index("id")
    df_order_content = pd.read_csv(db_dir / order_content_csv, names = ["id", "order_id", "inventory_id", "quantity", "price", "status"], index_col = 0, header=None)
    df_order_content["total_price"] = df_order_content["quantity"] * df_order_content["price"]
    df_orders_sum = df_order_content.groupby("order_id")["total_price"].sum()
    # mark a full order as fulfilled if and only if all of its line items are fulfilled
    df_orders_status = df_order_content.groupby("order_id")["status"].agg(lambda x: "fulfilled" if set(x) == set(["fulfilled"]) else "in progress")

    result = df_specific_order.merge(df_orders_sum.to_frame(), how = "left", left_index=True, right_on = "order_id")
    result = result.merge(df_orders_status.to_frame(), how = "left", left_index = True, right_on = "order_id")
    print("Specific Order with total_price and status")
    print(result.head(), '\n')

    if not test:
        result.to_csv(db_dir / specific_order_csv, header=None)

# calculates the amount of money each money gained/lost total from deposits and withdrawals
def depo_with(df_users):
    df_account_history = pd.read_csv(db_dir / account_history_csv, names=['id', 'uid', 'amount', 'time_stamp'], index_col = 0, header=None)
    df_user_sums = df_account_history.groupby('uid')['amount'].sum()

    temp_index = df_users.index
    result = df_users.merge(df_user_sums.to_frame(), how = "left", left_index=True, right_on = "uid")
    if len(result) != len(temp_index):
        raise ValueError('ERROR')
    result['amount'] = result['amount'].fillna(0)
    result.index = temp_index

    result["amount"] = result["amount"].round(2)
    print("Sum of deposits and withdrawals")
    print(result['amount'].head(), '\n')
    return result['amount']

# calculates the amount of money each user lost from placing orders
def subtract_purchases(df_users):
    df_specific_order = pd.read_csv(db_dir / specific_order_csv, names = ["id", "uid", "time_stamp", "total_price", "status"], index_col = 0, header=None)
    # sum up specific order total order prices for each user id
    df_orders_by_user = df_specific_order.groupby("uid")["total_price"].sum()
    #print(df_orders_by_user.head())

    temp_index = df_users.index
    result = df_users.merge(df_orders_by_user.to_frame(), how = "left", left_index=True, right_on = "uid")
    if len(result) != len(temp_index):
        raise ValueError('ERROR')
    result["total_price"] = result["total_price"].fillna(0)
    result = result.drop(columns=[i for i in result.columns if i not in ["total_price"]])
        #"uid", "firstname", "lastname", "address", "email", "password", "is_seller", 
    result.index = temp_index

    result["total_price"] = result["total_price"].round(2)
    print("Amount to subtract for purchases")
    print(result["total_price"].head(), '\n')
    return result["total_price"]

# calculates the amount of money each user gained from selling products
def add_sold(df_users):
    df_order_content = pd.read_csv(db_dir / order_content_csv, names = ["id", "order_id", "inventory_id", "quantity", "price", "status"], index_col = 0, header=None)
    # goes through the data order content by order since orders have multiple sellers
    df_order_content["total_price"] = df_order_content["quantity"] * df_order_content["price"]

    df_inventory = pd.read_csv(db_dir / inventory_csv, names= ["id", "uid", "pid", "quantity", "is_active"], index_col = 0, header=None)
    df_order_content_seller = df_order_content.merge(df_inventory, how = "inner", left_on="inventory_id", right_index = True)

    df_seller_sums = df_order_content_seller.groupby(by='uid')['total_price'].sum().to_frame()
    df_seller_sums.columns = ["amount"]

    temp_index = df_users.index
    result = df_users.merge(df_seller_sums, how = "left", left_index=True, right_on = "uid")
    if len(result) != len(temp_index):
        raise ValueError('ERROR')
    result["amount"] = result["amount"].fillna(0)
    result = result.drop(columns=[i for i in result.columns if i not in ["amount"]])
    result.index = temp_index

    result["amount"] = result["amount"].round(2)
    print("Amount to add for purchases")
    print(result["amount"].head(), '\n')
    return result["amount"]

# calculate the account balance for each user looking at how must the user deposited/withdrew money, places orders, and sold products
def calc_acct_balance(test):
    df_users = pd.read_csv(db_dir / users_csv, header=None)
    if len(df_users.columns) > 7: 
        print("User account balance already added")
        return
    print("Original Users")
    print(df_users.head(), '\n')
    df_users.columns =["id", "firstname", "lastname", "address", "email", "password", "is_seller"]
    df_users.set_index("id")

    depo_with_res = depo_with(df_users)
    subtract_res = subtract_purchases(df_users)
    add_res = add_sold(df_users)

    # the amount of money subtracted from users for purchasing should equal the money aded to users for selling
    print("Total amount deposited/withdrawn:", depo_with_res.sum())
    print("Total amount subtracted from users for specific orders:", subtract_res.sum())
    print("Total amount added to users for order content:", add_res.sum())

    df_users['amount'] = depo_with_res - subtract_res + add_res
    if not test:
        df_users.to_csv(db_dir / users_csv, header=None, index=None)

process_orders(False)
calc_acct_balance(False)